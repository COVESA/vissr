// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: VISSv3.0.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VISSClient is the client API for VISS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VISSClient interface {
	GetRequest(ctx context.Context, in *GetRequestMessage, opts ...grpc.CallOption) (*GetResponseMessage, error)
	SetRequest(ctx context.Context, in *SetRequestMessage, opts ...grpc.CallOption) (*SetResponseMessage, error)
	SubscribeRequest(ctx context.Context, in *SubscribeRequestMessage, opts ...grpc.CallOption) (VISS_SubscribeRequestClient, error)
	UnsubscribeRequest(ctx context.Context, in *UnsubscribeRequestMessage, opts ...grpc.CallOption) (*UnsubscribeResponseMessage, error)
}

type vISSClient struct {
	cc grpc.ClientConnInterface
}

func NewVISSClient(cc grpc.ClientConnInterface) VISSClient {
	return &vISSClient{cc}
}

func (c *vISSClient) GetRequest(ctx context.Context, in *GetRequestMessage, opts ...grpc.CallOption) (*GetResponseMessage, error) {
	out := new(GetResponseMessage)
	err := c.cc.Invoke(ctx, "/grpcProtobufMessages.VISS/GetRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vISSClient) SetRequest(ctx context.Context, in *SetRequestMessage, opts ...grpc.CallOption) (*SetResponseMessage, error) {
	out := new(SetResponseMessage)
	err := c.cc.Invoke(ctx, "/grpcProtobufMessages.VISS/SetRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vISSClient) SubscribeRequest(ctx context.Context, in *SubscribeRequestMessage, opts ...grpc.CallOption) (VISS_SubscribeRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &VISS_ServiceDesc.Streams[0], "/grpcProtobufMessages.VISS/SubscribeRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &vISSSubscribeRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VISS_SubscribeRequestClient interface {
	Recv() (*SubscribeStreamMessage, error)
	grpc.ClientStream
}

type vISSSubscribeRequestClient struct {
	grpc.ClientStream
}

func (x *vISSSubscribeRequestClient) Recv() (*SubscribeStreamMessage, error) {
	m := new(SubscribeStreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vISSClient) UnsubscribeRequest(ctx context.Context, in *UnsubscribeRequestMessage, opts ...grpc.CallOption) (*UnsubscribeResponseMessage, error) {
	out := new(UnsubscribeResponseMessage)
	err := c.cc.Invoke(ctx, "/grpcProtobufMessages.VISS/UnsubscribeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VISSServer is the server API for VISS service.
// All implementations must embed UnimplementedVISSServer
// for forward compatibility
type VISSServer interface {
	GetRequest(context.Context, *GetRequestMessage) (*GetResponseMessage, error)
	SetRequest(context.Context, *SetRequestMessage) (*SetResponseMessage, error)
	SubscribeRequest(*SubscribeRequestMessage, VISS_SubscribeRequestServer) error
	UnsubscribeRequest(context.Context, *UnsubscribeRequestMessage) (*UnsubscribeResponseMessage, error)
	mustEmbedUnimplementedVISSServer()
}

// UnimplementedVISSServer must be embedded to have forward compatible implementations.
type UnimplementedVISSServer struct {
}

func (UnimplementedVISSServer) GetRequest(context.Context, *GetRequestMessage) (*GetResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequest not implemented")
}
func (UnimplementedVISSServer) SetRequest(context.Context, *SetRequestMessage) (*SetResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRequest not implemented")
}
func (UnimplementedVISSServer) SubscribeRequest(*SubscribeRequestMessage, VISS_SubscribeRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRequest not implemented")
}
func (UnimplementedVISSServer) UnsubscribeRequest(context.Context, *UnsubscribeRequestMessage) (*UnsubscribeResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeRequest not implemented")
}
func (UnimplementedVISSServer) mustEmbedUnimplementedVISSServer() {}

// UnsafeVISSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VISSServer will
// result in compilation errors.
type UnsafeVISSServer interface {
	mustEmbedUnimplementedVISSServer()
}

func RegisterVISSServer(s grpc.ServiceRegistrar, srv VISSServer) {
	s.RegisterService(&VISS_ServiceDesc, srv)
}

func _VISS_GetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VISSServer).GetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcProtobufMessages.VISS/GetRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VISSServer).GetRequest(ctx, req.(*GetRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _VISS_SetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VISSServer).SetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcProtobufMessages.VISS/SetRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VISSServer).SetRequest(ctx, req.(*SetRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _VISS_SubscribeRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VISSServer).SubscribeRequest(m, &vISSSubscribeRequestServer{stream})
}

type VISS_SubscribeRequestServer interface {
	Send(*SubscribeStreamMessage) error
	grpc.ServerStream
}

type vISSSubscribeRequestServer struct {
	grpc.ServerStream
}

func (x *vISSSubscribeRequestServer) Send(m *SubscribeStreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _VISS_UnsubscribeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VISSServer).UnsubscribeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcProtobufMessages.VISS/UnsubscribeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VISSServer).UnsubscribeRequest(ctx, req.(*UnsubscribeRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// VISS_ServiceDesc is the grpc.ServiceDesc for VISS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VISS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcProtobufMessages.VISS",
	HandlerType: (*VISSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRequest",
			Handler:    _VISS_GetRequest_Handler,
		},
		{
			MethodName: "SetRequest",
			Handler:    _VISS_SetRequest_Handler,
		},
		{
			MethodName: "UnsubscribeRequest",
			Handler:    _VISS_UnsubscribeRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeRequest",
			Handler:       _VISS_SubscribeRequest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "VISSv3.0.proto",
}
