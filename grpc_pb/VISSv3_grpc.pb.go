// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: VISSv3.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VISSv2Client is the client API for VISSv2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VISSv2Client interface {
	GetRequest(ctx context.Context, in *GetRequestMessage, opts ...grpc.CallOption) (*GetResponseMessage, error)
	SetRequest(ctx context.Context, in *SetRequestMessage, opts ...grpc.CallOption) (*SetResponseMessage, error)
	SubscribeRequest(ctx context.Context, in *SubscribeRequestMessage, opts ...grpc.CallOption) (VISSv2_SubscribeRequestClient, error)
	UnsubscribeRequest(ctx context.Context, in *UnsubscribeRequestMessage, opts ...grpc.CallOption) (*UnsubscribeResponseMessage, error)
}

type vISSv2Client struct {
	cc grpc.ClientConnInterface
}

func NewVISSv2Client(cc grpc.ClientConnInterface) VISSv2Client {
	return &vISSv2Client{cc}
}

func (c *vISSv2Client) GetRequest(ctx context.Context, in *GetRequestMessage, opts ...grpc.CallOption) (*GetResponseMessage, error) {
	out := new(GetResponseMessage)
	err := c.cc.Invoke(ctx, "/grpcProtobufMessages.VISSv2/GetRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vISSv2Client) SetRequest(ctx context.Context, in *SetRequestMessage, opts ...grpc.CallOption) (*SetResponseMessage, error) {
	out := new(SetResponseMessage)
	err := c.cc.Invoke(ctx, "/grpcProtobufMessages.VISSv2/SetRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vISSv2Client) SubscribeRequest(ctx context.Context, in *SubscribeRequestMessage, opts ...grpc.CallOption) (VISSv2_SubscribeRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &VISSv2_ServiceDesc.Streams[0], "/grpcProtobufMessages.VISSv2/SubscribeRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &vISSv2SubscribeRequestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VISSv2_SubscribeRequestClient interface {
	Recv() (*SubscribeStreamMessage, error)
	grpc.ClientStream
}

type vISSv2SubscribeRequestClient struct {
	grpc.ClientStream
}

func (x *vISSv2SubscribeRequestClient) Recv() (*SubscribeStreamMessage, error) {
	m := new(SubscribeStreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vISSv2Client) UnsubscribeRequest(ctx context.Context, in *UnsubscribeRequestMessage, opts ...grpc.CallOption) (*UnsubscribeResponseMessage, error) {
	out := new(UnsubscribeResponseMessage)
	err := c.cc.Invoke(ctx, "/grpcProtobufMessages.VISSv2/UnsubscribeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VISSv2Server is the server API for VISSv2 service.
// All implementations must embed UnimplementedVISSv2Server
// for forward compatibility
type VISSv2Server interface {
	GetRequest(context.Context, *GetRequestMessage) (*GetResponseMessage, error)
	SetRequest(context.Context, *SetRequestMessage) (*SetResponseMessage, error)
	SubscribeRequest(*SubscribeRequestMessage, VISSv2_SubscribeRequestServer) error
	UnsubscribeRequest(context.Context, *UnsubscribeRequestMessage) (*UnsubscribeResponseMessage, error)
	mustEmbedUnimplementedVISSv2Server()
}

// UnimplementedVISSv2Server must be embedded to have forward compatible implementations.
type UnimplementedVISSv2Server struct {
}

func (UnimplementedVISSv2Server) GetRequest(context.Context, *GetRequestMessage) (*GetResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRequest not implemented")
}
func (UnimplementedVISSv2Server) SetRequest(context.Context, *SetRequestMessage) (*SetResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRequest not implemented")
}
func (UnimplementedVISSv2Server) SubscribeRequest(*SubscribeRequestMessage, VISSv2_SubscribeRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeRequest not implemented")
}
func (UnimplementedVISSv2Server) UnsubscribeRequest(context.Context, *UnsubscribeRequestMessage) (*UnsubscribeResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeRequest not implemented")
}
func (UnimplementedVISSv2Server) mustEmbedUnimplementedVISSv2Server() {}

// UnsafeVISSv2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VISSv2Server will
// result in compilation errors.
type UnsafeVISSv2Server interface {
	mustEmbedUnimplementedVISSv2Server()
}

func RegisterVISSv2Server(s grpc.ServiceRegistrar, srv VISSv2Server) {
	s.RegisterService(&VISSv2_ServiceDesc, srv)
}

func _VISSv2_GetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VISSv2Server).GetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcProtobufMessages.VISSv2/GetRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VISSv2Server).GetRequest(ctx, req.(*GetRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _VISSv2_SetRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VISSv2Server).SetRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcProtobufMessages.VISSv2/SetRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VISSv2Server).SetRequest(ctx, req.(*SetRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _VISSv2_SubscribeRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequestMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VISSv2Server).SubscribeRequest(m, &vISSv2SubscribeRequestServer{stream})
}

type VISSv2_SubscribeRequestServer interface {
	Send(*SubscribeStreamMessage) error
	grpc.ServerStream
}

type vISSv2SubscribeRequestServer struct {
	grpc.ServerStream
}

func (x *vISSv2SubscribeRequestServer) Send(m *SubscribeStreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _VISSv2_UnsubscribeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VISSv2Server).UnsubscribeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcProtobufMessages.VISSv2/UnsubscribeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VISSv2Server).UnsubscribeRequest(ctx, req.(*UnsubscribeRequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// VISSv2_ServiceDesc is the grpc.ServiceDesc for VISSv2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VISSv2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcProtobufMessages.VISSv2",
	HandlerType: (*VISSv2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRequest",
			Handler:    _VISSv2_GetRequest_Handler,
		},
		{
			MethodName: "SetRequest",
			Handler:    _VISSv2_SetRequest_Handler,
		},
		{
			MethodName: "UnsubscribeRequest",
			Handler:    _VISSv2_UnsubscribeRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeRequest",
			Handler:       _VISSv2_SubscribeRequest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "VISSv3.proto",
}
